diff --git a/index.d.ts b/index.d.ts
index 9c397f71d8ac6f192c1ac4c55c298badc9b9aadf..ae65e4582541ba84748953e55a4062b06532492c 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -1,4 +1,4 @@
-// Type definitions for conventional-recommended-bump 6.1
+// Type definitions for conventional-recommended-bump 9.0
 // Project: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-recommended-bump#readme
 // Definitions by: Jason Kwok <https://github.com/JasonHK>
 // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
@@ -17,7 +17,7 @@ import { Commit, Options as ParserOptions } from "conventional-commits-parser";
  *                 * `whatBump`
  * @param callback
  */
-declare function conventionalRecommendedBump(options: Options, callback: Callback): void;
+declare function conventionalRecommendedBump(options: Options): Promise<void>;
 
 /**
  * @param options    `options` is an object with the following properties:
@@ -30,9 +30,29 @@ declare function conventionalRecommendedBump(options: Options, callback: Callbac
  *                   documentation for available options.
  * @param callback
  */
-declare function conventionalRecommendedBump(options: Options, parserOpts: ParserOptions, callback: Callback): void;
+declare function conventionalRecommendedBump(
+  options: Options,
+  parserOpts: ParserOptions
+): Promise<void>;
 
 declare namespace conventionalRecommendedBump {
+  /**
+   * `recommendation` is an `object` with a single property, `releaseType`.
+   *
+   * `releaseType` is a `string`: Possible values: `major`, `minor` and `patch`,
+   * or `undefined` if `whatBump` does not return a valid `level` property, or
+   * the `level` property is not set by `whatBump`.
+   */
+  interface Callback {
+    /**
+     * @param error
+     * @param recommendation `recommendation` is an `object` with a single property,
+     *                       `releaseType`.
+     */
+    (error: any, recommendation: Callback.Recommendation): void;
+  }
+
+  namespace Callback {
     /**
      * `recommendation` is an `object` with a single property, `releaseType`.
      *
@@ -40,134 +60,117 @@ declare namespace conventionalRecommendedBump {
      * or `undefined` if `whatBump` does not return a valid `level` property, or
      * the `level` property is not set by `whatBump`.
      */
-    interface Callback {
-        /**
-         * @param error
-         * @param recommendation `recommendation` is an `object` with a single property,
-         *                       `releaseType`.
-         */
-        (error: any, recommendation: Callback.Recommendation): void;
+    interface Recommendation extends Options.WhatBump.Result {
+      /**
+       * `releaseType` is a `string`: Possible values: `major`, `minor` and `patch`,
+       * or `undefined` if `whatBump` does not return a valid `level` property, or
+       * the `level` property is not set by `whatBump`.
+       */
+      releaseType?: Recommendation.ReleaseType | undefined;
     }
 
-    namespace Callback {
-        /**
-         * `recommendation` is an `object` with a single property, `releaseType`.
-         *
-         * `releaseType` is a `string`: Possible values: `major`, `minor` and `patch`,
-         * or `undefined` if `whatBump` does not return a valid `level` property, or
-         * the `level` property is not set by `whatBump`.
-         */
-        interface Recommendation extends Options.WhatBump.Result {
-            /**
-             * `releaseType` is a `string`: Possible values: `major`, `minor` and `patch`,
-             * or `undefined` if `whatBump` does not return a valid `level` property, or
-             * the `level` property is not set by `whatBump`.
-             */
-            releaseType?: Recommendation.ReleaseType | undefined;
-        }
-
-        namespace Recommendation {
-            type ReleaseType = "major" | "minor" | "patch";
-        }
+    namespace Recommendation {
+      type ReleaseType = "major" | "minor" | "patch";
     }
+  }
+
+  /**
+   * `options` is an object with the following properties:
+   * * `ignoreReverted`
+   * * `preset`
+   * * `config`
+   * * `whatBump`
+   */
+  interface Options {
+    /**
+     * If `true`, reverted commits will be ignored.
+     *
+     * @default
+     * true
+     */
+    ignoreReverted?: boolean | undefined;
 
     /**
-     * `options` is an object with the following properties:
-     * * `ignoreReverted`
-     * * `preset`
-     * * `config`
-     * * `whatBump`
+     * It's recommended to use a preset so you don't have to define everything
+     * yourself.
+     *
+     * The value is passed to [`conventional-changelog-preset-loader`](https://www.npmjs.com/package/conventional-changelog-preset-loader).
      */
-    interface Options {
-        /**
-         * If `true`, reverted commits will be ignored.
-         *
-         * @default
-         * true
-         */
-        ignoreReverted?: boolean | undefined;
-
-        /**
-         * It's recommended to use a preset so you don't have to define everything
-         * yourself.
-         *
-         * The value is passed to [`conventional-changelog-preset-loader`](https://www.npmjs.com/package/conventional-changelog-preset-loader).
-         */
-        preset?: string | undefined;
-
-        /**
-         * This should serve as default values for other arguments of
-         * `conventional-recommended-bump` so you don't need to rewrite the same or
-         * similar config across your projects.
-         *
-         * @remarks
-         * `config` option will be overwritten by the value loaded by
-         * `conventional-changelog-preset-loader` if the `preset` options is set.
-         */
-        config?: CoreOptions.Config<Commit, WriterContext> | undefined;
-
-        /**
-         * A function that takes parsed commits as an argument.
-         *
-         * ```
-         * whatBump(commits) {};
-         * ```
-         *
-         * `commits` is an array of all commits from last semver tag to `HEAD` as parsed
-         * by `conventional-commits-parser`.
-         *
-         * This should return an object including but not limited to `level` and `reason`.
-         * `level` is a `number` indicating what bump it should be and `reason` is the
-         * reason of such release.
-         */
-        whatBump?: Options.WhatBump | undefined;
-
-        /**
-         * Specify a prefix for the git tag that will be taken into account during the
-         * comparison.
-         *
-         * For instance if your version tag is prefixed by `version/` instead of `v` you
-         * would specifying `--tagPrefix=version/` using the CLI, or `version/` as the
-         * value of the `tagPrefix` option.
-         */
-        tagPrefix?: string | undefined;
-
-        /**
-         * If given, unstable tags (e.g. `x.x.x-alpha.1`, `x.x.x-rc.2`) will be skipped.
-         */
-        skipUnstable?: boolean | undefined;
-
-        /**
-         * Specify the name of a package in a [Lerna](https://lernajs.io/)-managed
-         * repository. The package name will be used when fetching all changes to a
-         * package since the last time that package was released.
-         *
-         * For instance if your project contained a package named
-         * `conventional-changelog`, you could have only commits that have happened
-         * since the last release of `conventional-changelog` was tagged by
-         * specifying `--lernaPackage=conventional-changelog` using the CLI, or
-         * `conventional-changelog` as the value of the `lernaPackage` option.
-         */
-        lernaPackage?: string | undefined;
-
-        /**
-         * Specify the path to only calculate with git commits related to the path.
-         * If you want to calculate recommended bumps of packages in a Lerna-managed
-         * repository, path should be use along with lernaPackage for each of the package.
-         */
-        path?: string | undefined;
-    }
+    preset?: string | undefined;
+
+    /**
+     * This should serve as default values for other arguments of
+     * `conventional-recommended-bump` so you don't need to rewrite the same or
+     * similar config across your projects.
+     *
+     * @remarks
+     * `config` option will be overwritten by the value loaded by
+     * `conventional-changelog-preset-loader` if the `preset` options is set.
+     */
+    config?: CoreOptions.Config<Commit, WriterContext> | undefined;
+
+    /**
+     * A function that takes parsed commits as an argument.
+     *
+     * ```
+     * whatBump(commits) {};
+     * ```
+     *
+     * `commits` is an array of all commits from last semver tag to `HEAD` as parsed
+     * by `conventional-commits-parser`.
+     *
+     * This should return an object including but not limited to `level` and `reason`.
+     * `level` is a `number` indicating what bump it should be and `reason` is the
+     * reason of such release.
+     */
+    whatBump?: Options.WhatBump | undefined;
+
+    /**
+     * Specify a prefix for the git tag that will be taken into account during the
+     * comparison.
+     *
+     * For instance if your version tag is prefixed by `version/` instead of `v` you
+     * would specifying `--tagPrefix=version/` using the CLI, or `version/` as the
+     * value of the `tagPrefix` option.
+     */
+    tagPrefix?: string | undefined;
+
+    /**
+     * If given, unstable tags (e.g. `x.x.x-alpha.1`, `x.x.x-rc.2`) will be skipped.
+     */
+    skipUnstable?: boolean | undefined;
+
+    /**
+     * Specify the name of a package in a [Lerna](https://lernajs.io/)-managed
+     * repository. The package name will be used when fetching all changes to a
+     * package since the last time that package was released.
+     *
+     * For instance if your project contained a package named
+     * `conventional-changelog`, you could have only commits that have happened
+     * since the last release of `conventional-changelog` was tagged by
+     * specifying `--lernaPackage=conventional-changelog` using the CLI, or
+     * `conventional-changelog` as the value of the `lernaPackage` option.
+     */
+    lernaPackage?: string | undefined;
+
+    /**
+     * Specify the path to only calculate with git commits related to the path.
+     * If you want to calculate recommended bumps of packages in a Lerna-managed
+     * repository, path should be use along with lernaPackage for each of the package.
+     */
+    path?: string | undefined;
+  }
 
-    namespace Options {
-        type WhatBump = (commits: Commit[]) => WhatBump.Result;
+  namespace Options {
+    type WhatBump = (commits: Commit[]) => WhatBump.Result;
 
-        namespace WhatBump {
-            interface Result {
-                level?: number | undefined;
-                reason?: string | undefined;
-            }
-        }
+    namespace WhatBump {
+      interface Result {
+        level?: number | undefined;
+        reason?: string | undefined;
+      }
     }
+  }
 }
 
 type Callback = conventionalRecommendedBump.Callback;
